package com.bjsxt;
/*
* 位移运算符     在二进制基础上移动
*           左位移:将所有二进制数向左移动(补码),右侧空出来的位置用0补齐,,相当于乘2的位移次幂
*           右位移:将所有二进制数向右移动(补码),左侧空出来的位置用符号位补齐,相当于除以2的位移次幂
*
*               无符号右位移:无论数字为正还是负,右移时左侧都用0来补齐.
*int a = 8>>2;
* 计算顺序,
* 8
*00000000 00000000 00000000 00001000  8的原码
*00000000 00000000 00000000 00001000  8的反码
*00000000 00000000 00000000 00001000  8的补码
*右移2位
*00000000 00000000 00000000 00000010   2的补码相当于2的原码,即等于8/2^2=2
*int b = -8 << 2;
* 计算顺序
* -8取补码
*10000000 00000000 00000000 00001000   -8的原码
*11111111 11111111 11111111 11110111   -8的反码
*11111111 11111111 11111111 11111000   -8的补码
* 左移2位
*11111111 11111111 11111111 11100000    x的补码,进行取反
*11111111 11111111 11111111 11100001   x的反码,取原码
*10000000 00000000 00000000 00011110    -36的原码,相当于-8*2^2=32
*
*
*
* */

public class Demo5 {
    public static void main(String[] args) {
        int a=8>>2;//相当于8/2^2.
        System.out.println(a);
        int b = -8 << 2;//相当于-8*2^2
        System.out.println(b);
        int c = -8 >>> 2;
        System.out.println(c);
    }
}
